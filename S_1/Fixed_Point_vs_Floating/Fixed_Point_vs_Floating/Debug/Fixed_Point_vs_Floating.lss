
Fixed_Point_vs_Floating.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000082b  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000628  00000000  00000000  00000a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000325  00000000  00000000  00001037  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  0000135c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000371  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000dc  00000000  00000000  00001745  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001821  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Fixed_Point_sum>:
#include "Fixed_VS_Float.h"
void Fixed_Point_sum(Fixed FIX ,int times)
{
	
	Fixed SUM_FIX =0 ;
	for(int i =0; i <times;i++ )
  6c:	16 16       	cp	r1, r22
  6e:	17 06       	cpc	r1, r23
  70:	34 f4       	brge	.+12     	; 0x7e <Fixed_Point_sum+0x12>
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	01 96       	adiw	r24, 0x01	; 1
  78:	68 17       	cp	r22, r24
  7a:	79 07       	cpc	r23, r25
  7c:	e1 f7       	brne	.-8      	; 0x76 <Fixed_Point_sum+0xa>
	{
		SUM_FIX+=FIX;
	}
	PORTC^=(1<<SUM_FIX_LED);
  7e:	95 b3       	in	r25, 0x15	; 21
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	89 27       	eor	r24, r25
  84:	85 bb       	out	0x15, r24	; 21
  86:	08 95       	ret

00000088 <Floating_sum>:


void Floating_sum(float flo ,int times)
{
	float sum =0 ;
	for(int i =0; i <times;i++ )
  88:	14 16       	cp	r1, r20
  8a:	15 06       	cpc	r1, r21
  8c:	34 f4       	brge	.+12     	; 0x9a <Floating_sum+0x12>
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	01 96       	adiw	r24, 0x01	; 1
  94:	48 17       	cp	r20, r24
  96:	59 07       	cpc	r21, r25
  98:	e1 f7       	brne	.-8      	; 0x92 <Floating_sum+0xa>
	{
		sum+=flo;
	}
	PORTC^=(1<<SUM_FLO_LED);
  9a:	95 b3       	in	r25, 0x15	; 21
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	89 27       	eor	r24, r25
  a0:	85 bb       	out	0x15, r24	; 21
  a2:	08 95       	ret

000000a4 <main>:
#include "Fixed_VS_Float.h"

int main(void)
{
    	
	DDRC=0XFF;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	84 bb       	out	0x14, r24	; 20
	float flo =Num ;
	int TIMES =Sum_10000_Times(Num);
	
    while (1) 
    {
		Floating_sum(flo,TIMES);
  a8:	4f ef       	ldi	r20, 0xFF	; 255
  aa:	5f e7       	ldi	r21, 0x7F	; 127
  ac:	6a e9       	ldi	r22, 0x9A	; 154
  ae:	79 e9       	ldi	r23, 0x99	; 153
  b0:	85 e2       	ldi	r24, 0x25	; 37
  b2:	91 e4       	ldi	r25, 0x41	; 65
  b4:	0e 94 44 00 	call	0x88	; 0x88 <Floating_sum>
		Fixed_Point_sum(FIX,TIMES);
  b8:	6f ef       	ldi	r22, 0xFF	; 255
  ba:	7f e7       	ldi	r23, 0x7F	; 127
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 36 00 	call	0x6c	; 0x6c <Fixed_Point_sum>
  c4:	f1 cf       	rjmp	.-30     	; 0xa8 <main+0x4>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
